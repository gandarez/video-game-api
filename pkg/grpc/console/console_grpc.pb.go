// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/protos/console.proto

package console

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsoleService_GetConsole_FullMethodName    = "/gandarez.video_game_api.console.ConsoleService/GetConsole"
	ConsoleService_CreateConsole_FullMethodName = "/gandarez.video_game_api.console.ConsoleService/CreateConsole"
)

// ConsoleServiceClient is the client API for ConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleServiceClient interface {
	GetConsole(ctx context.Context, in *GetConsoleRequest, opts ...grpc.CallOption) (*GetConsoleResponse, error)
	CreateConsole(ctx context.Context, in *CreateConsoleRequest, opts ...grpc.CallOption) (*CreateConsoleResponse, error)
}

type consoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleServiceClient(cc grpc.ClientConnInterface) ConsoleServiceClient {
	return &consoleServiceClient{cc}
}

func (c *consoleServiceClient) GetConsole(ctx context.Context, in *GetConsoleRequest, opts ...grpc.CallOption) (*GetConsoleResponse, error) {
	out := new(GetConsoleResponse)
	err := c.cc.Invoke(ctx, ConsoleService_GetConsole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CreateConsole(ctx context.Context, in *CreateConsoleRequest, opts ...grpc.CallOption) (*CreateConsoleResponse, error) {
	out := new(CreateConsoleResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CreateConsole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServiceServer is the server API for ConsoleService service.
// All implementations should embed UnimplementedConsoleServiceServer
// for forward compatibility
type ConsoleServiceServer interface {
	GetConsole(context.Context, *GetConsoleRequest) (*GetConsoleResponse, error)
	CreateConsole(context.Context, *CreateConsoleRequest) (*CreateConsoleResponse, error)
}

// UnimplementedConsoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConsoleServiceServer struct {
}

func (UnimplementedConsoleServiceServer) GetConsole(context.Context, *GetConsoleRequest) (*GetConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsole not implemented")
}
func (UnimplementedConsoleServiceServer) CreateConsole(context.Context, *CreateConsoleRequest) (*CreateConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsole not implemented")
}

// UnsafeConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleServiceServer will
// result in compilation errors.
type UnsafeConsoleServiceServer interface {
	mustEmbedUnimplementedConsoleServiceServer()
}

func RegisterConsoleServiceServer(s grpc.ServiceRegistrar, srv ConsoleServiceServer) {
	s.RegisterService(&ConsoleService_ServiceDesc, srv)
}

func _ConsoleService_GetConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).GetConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_GetConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).GetConsole(ctx, req.(*GetConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CreateConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CreateConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CreateConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CreateConsole(ctx, req.(*CreateConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleService_ServiceDesc is the grpc.ServiceDesc for ConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gandarez.video_game_api.console.ConsoleService",
	HandlerType: (*ConsoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsole",
			Handler:    _ConsoleService_GetConsole_Handler,
		},
		{
			MethodName: "CreateConsole",
			Handler:    _ConsoleService_CreateConsole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/console.proto",
}
