// Code generated by mockery v2.42.0. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/gandarez/video-game-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockConsoleRepository is an autogenerated mock type for the ConsoleRepository type
type MockConsoleRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockConsoleRepository) FindByID(ctx context.Context, id string) (*entity.Console, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Console, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Console); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, console
func (_m *MockConsoleRepository) Save(ctx context.Context, console *entity.Console) error {
	ret := _m.Called(ctx, console)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Console) error); ok {
		r0 = rf(ctx, console)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockConsoleRepository creates a new instance of MockConsoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsoleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsoleRepository {
	mock := &MockConsoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
