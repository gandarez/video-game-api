// Code generated by mockery v2.42.0. DO NOT EDIT.

package igdb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIgdbClient is an autogenerated mock type for the Igdb type
type MockIgdbClient struct {
	mock.Mock
}

// Games provides a mock function with given fields: ctx, criteria
func (_m *MockIgdbClient) Games(ctx context.Context, criteria string) ([]Game, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for Games")
	}

	var r0 []Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]Game, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []Game); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Genres provides a mock function with given fields: ctx, ids
func (_m *MockIgdbClient) Genres(ctx context.Context, ids []int) ([]Genre, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Genres")
	}

	var r0 []Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]Genre, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []Genre); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Platforms provides a mock function with given fields: ctx, ids
func (_m *MockIgdbClient) Platforms(ctx context.Context, ids []int) ([]Platform, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Platforms")
	}

	var r0 []Platform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]Platform, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []Platform); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Platform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIgdbClient creates a new instance of MockIgdbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIgdbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIgdbClient {
	mock := &MockIgdbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
