// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/gandarez/video-game-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsoleRepositoryCreator creates a new instance of MockConsoleRepositoryCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsoleRepositoryCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsoleRepositoryCreator {
	mock := &MockConsoleRepositoryCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsoleRepositoryCreator is an autogenerated mock type for the ConsoleRepositoryCreator type
type MockConsoleRepositoryCreator struct {
	mock.Mock
}

type MockConsoleRepositoryCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsoleRepositoryCreator) EXPECT() *MockConsoleRepositoryCreator_Expecter {
	return &MockConsoleRepositoryCreator_Expecter{mock: &_m.Mock}
}

// Save provides a mock function for the type MockConsoleRepositoryCreator
func (_mock *MockConsoleRepositoryCreator) Save(ctx context.Context, console *entity.Console) error {
	ret := _mock.Called(ctx, console)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Console) error); ok {
		r0 = returnFunc(ctx, console)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConsoleRepositoryCreator_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConsoleRepositoryCreator_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - console *entity.Console
func (_e *MockConsoleRepositoryCreator_Expecter) Save(ctx interface{}, console interface{}) *MockConsoleRepositoryCreator_Save_Call {
	return &MockConsoleRepositoryCreator_Save_Call{Call: _e.mock.On("Save", ctx, console)}
}

func (_c *MockConsoleRepositoryCreator_Save_Call) Run(run func(ctx context.Context, console *entity.Console)) *MockConsoleRepositoryCreator_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entity.Console
		if args[1] != nil {
			arg1 = args[1].(*entity.Console)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConsoleRepositoryCreator_Save_Call) Return(err error) *MockConsoleRepositoryCreator_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConsoleRepositoryCreator_Save_Call) RunAndReturn(run func(ctx context.Context, console *entity.Console) error) *MockConsoleRepositoryCreator_Save_Call {
	_c.Call.Return(run)
	return _c
}
