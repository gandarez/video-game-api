// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/gandarez/video-game-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsoleRepositoryFinder creates a new instance of MockConsoleRepositoryFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsoleRepositoryFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsoleRepositoryFinder {
	mock := &MockConsoleRepositoryFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsoleRepositoryFinder is an autogenerated mock type for the ConsoleRepositoryFinder type
type MockConsoleRepositoryFinder struct {
	mock.Mock
}

type MockConsoleRepositoryFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsoleRepositoryFinder) EXPECT() *MockConsoleRepositoryFinder_Expecter {
	return &MockConsoleRepositoryFinder_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function for the type MockConsoleRepositoryFinder
func (_mock *MockConsoleRepositoryFinder) FindByID(ctx context.Context, id string) (*entity.Console, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Console
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.Console, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.Console); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Console)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsoleRepositoryFinder_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockConsoleRepositoryFinder_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockConsoleRepositoryFinder_Expecter) FindByID(ctx interface{}, id interface{}) *MockConsoleRepositoryFinder_FindByID_Call {
	return &MockConsoleRepositoryFinder_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockConsoleRepositoryFinder_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockConsoleRepositoryFinder_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConsoleRepositoryFinder_FindByID_Call) Return(console *entity.Console, err error) *MockConsoleRepositoryFinder_FindByID_Call {
	_c.Call.Return(console, err)
	return _c
}

func (_c *MockConsoleRepositoryFinder_FindByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*entity.Console, error)) *MockConsoleRepositoryFinder_FindByID_Call {
	_c.Call.Return(run)
	return _c
}
