// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/gandarez/video-game-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsoleRepositoryLister creates a new instance of MockConsoleRepositoryLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsoleRepositoryLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsoleRepositoryLister {
	mock := &MockConsoleRepositoryLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsoleRepositoryLister is an autogenerated mock type for the ConsoleRepositoryLister type
type MockConsoleRepositoryLister struct {
	mock.Mock
}

type MockConsoleRepositoryLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsoleRepositoryLister) EXPECT() *MockConsoleRepositoryLister_Expecter {
	return &MockConsoleRepositoryLister_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type MockConsoleRepositoryLister
func (_mock *MockConsoleRepositoryLister) FindAll(ctx context.Context, page int, rows int) ([]*entity.Console, error) {
	ret := _mock.Called(ctx, page, rows)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entity.Console
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*entity.Console, error)); ok {
		return returnFunc(ctx, page, rows)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*entity.Console); ok {
		r0 = returnFunc(ctx, page, rows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Console)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, page, rows)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsoleRepositoryLister_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockConsoleRepositoryLister_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - rows int
func (_e *MockConsoleRepositoryLister_Expecter) FindAll(ctx interface{}, page interface{}, rows interface{}) *MockConsoleRepositoryLister_FindAll_Call {
	return &MockConsoleRepositoryLister_FindAll_Call{Call: _e.mock.On("FindAll", ctx, page, rows)}
}

func (_c *MockConsoleRepositoryLister_FindAll_Call) Run(run func(ctx context.Context, page int, rows int)) *MockConsoleRepositoryLister_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConsoleRepositoryLister_FindAll_Call) Return(consoles []*entity.Console, err error) *MockConsoleRepositoryLister_FindAll_Call {
	_c.Call.Return(consoles, err)
	return _c
}

func (_c *MockConsoleRepositoryLister_FindAll_Call) RunAndReturn(run func(ctx context.Context, page int, rows int) ([]*entity.Console, error)) *MockConsoleRepositoryLister_FindAll_Call {
	_c.Call.Return(run)
	return _c
}
